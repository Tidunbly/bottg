from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from aiogram.types import CallbackQuery, FSInputFile
from filters_new import *
from main import *
from kyboards import *
from aiogram import F, Router
from config import *
from create_bot import bot, db

user_router = Router()


@user_router.message(F.chat.func(lambda chat: chat.id != AdminChatId), CommandStart())
async def command_start_handler(msg: Message, state: FSMContext):
    await msg.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {msg.from_user.full_name}!")

    photo = FSInputFile(r"C:\Users\–ù–∏–∫–∏—Ç–∞\Documents\I-OiP04hzkg.jpg")
    await bot.send_photo(msg.from_user.id, photo, caption='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—Ä–ø—É—Å–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: 8–±')
    await state.set_state(Answer.waiting_for_place)


@user_router.message(F.chat.func(lambda chat: chat.id != AdminChatId), Answer.waiting_for_place)
async def place_handler(msg: Message, state: FSMContext):
    building = msg.text

    await state.update_data(building=building)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä: 234 –∏–ª–∏ –£ –≥–ª–∞–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ —Å–ª–µ–≤–∞')
    await state.set_state(Answer.waiting_for_office)


@user_router.message(F.chat.func(lambda chat: chat.id != AdminChatId), Answer.waiting_for_office)
async def office_handler(msg: Message, state: FSMContext):
    office = msg.text
    await state.update_data(office=office)
    await state.set_state(Answer.waiting_for_query)
    await msg.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.')


@user_router.message(F.chat.func(lambda chat: chat.id != AdminChatId), Answer.waiting_for_query)
async def req_handler(msg: Message, state: FSMContext):
    await msg.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å‚ù§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–∞—à–µ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞!ü¶æ")
    data = await state.get_data()

    from_user_msg = msg.text
    building = data.get('building')
    office = data.get('office')


    query_id = await db.add_query(msg.from_user.id, from_user_msg, f'{building} {office}', '', '–ù–µ —Ä–µ—à—ë–Ω')

    await state.update_data(query_id=query_id)


    response = await rag_answer_with_history(question=from_user_msg, query_id=query_id)



    await db.update_query_response(query_id=query_id, answer=response)

    await state.update_data(from_user_msg=from_user_msg, response=response)
    await state.set_state(Answer.waiting_for_continue)

    await msg.answer(response, parse_mode="Markdown")
    await msg.answer("–ù–∞–º —É–¥–∞–ª–æ—Å—å –≤–∞–º –ø–æ–º–æ—á—å?", reply_markup=builder.as_markup())


@user_router.message(Answer.waiting_for_continue)
async def cont_handler(msg: Message, state: FSMContext):
    data = await state.get_data()
    query_id = data.get('query_id')
    from_user_msg = msg.text

    response = await rag_answer_with_history(question=from_user_msg, query_id=query_id)

    await msg.answer(response, parse_mode="Markdown", reply_markup=builder.as_markup())



@user_router.callback_query(F.data == "button_solved")
async def solved_button(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    from_user_msg = data.get("from_user_msg", "")
    # class_of_question = data.get("class_of_question", "")

    query_id = data.get('query_id')

    await callback.message.answer("–ë—ã–ª–∏ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!‚ù§ –û—Ü–µ–Ω–∏—Ç–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞", reply_markup=builder_rate.as_markup())

    await db.update_query_status(query_id=query_id, status='–†–µ—à—ë–Ω', admin_id=None)

    await db.add_query_to_rating(query_id, from_user_msg)
    await delete_session_history(query_id)

    # data_to_log = f"{datetime.datetime.now()} \n–ó–∞–ø—Ä–æ—Å: {from_user_msg} \n–¢–∏–ø: {class_of_question} \n–°—Ç–∞—Ç—É—Å: –†–µ—à—ë–Ω\n"
    # with open(logs_path, "a", encoding="utf-8") as file:
    #     file.write(data_to_log + "\n")

    await state.set_state(Answer.waiting_for_rate_1)
    await callback.answer()


@user_router.callback_query(F.data == "button_unsolved")
async def unsolved_button(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    from_user_msg = data.get("from_user_msg", "")
    # class_of_question = data.get("class_of_question", "")
    query_id = data.get('query_id')

    await callback.message.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")

    # data_to_log = f"{datetime.datetime.now()} \n–ó–∞–ø—Ä–æ—Å: {from_user_msg} \n–¢–∏–ø: {class_of_question} \n–°—Ç–∞—Ç—É—Å: –ù–µ —Ä–µ—à—ë–Ω\n"
    # with open(logs_path, "a", encoding="utf-8") as file:
    #     file.write(data_to_log + "\n")

    await db.update_query_status(query_id=query_id, status='–ù–µ —Ä–µ—à—ë–Ω', admin_id=None)
    await delete_session_history(query_id)



    await bot.send_message(AdminChatId,
                           f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {callback.from_user.full_name} - @{callback.from_user.username} - {callback.from_user.id}:\n {from_user_msg}")

    await state.set_state(Answer.waiting_for_support)
    await callback.answer()


@user_router.callback_query(F.data == 'new_query')
async def new_query_button(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—Ä–ø—É—Å–∞.")
    await state.set_state(Answer.waiting_for_place)
    await call.answer()


@user_router.callback_query(Answer.waiting_for_rate_1, F.data.startswith('rate_'))
async def rate_buttons(call: CallbackQuery, state: FSMContext):

    rate_1 = call.data[-1]

    await state.update_data(rate_1=rate_1)

    await call.message.answer('–û—Ü–µ–Ω–∏—Ç–µ –ø–æ–ª–Ω–æ—Ç—É –æ—Ç–≤–µ—Ç–∞', reply_markup=builder_rate.as_markup())
    await state.set_state(Answer.waiting_for_rate_2)
    await call.answer()


@user_router.callback_query(Answer.waiting_for_rate_2, F.data.startswith('rate_'))
async def rate_buttons(call: CallbackQuery, state: FSMContext):

    rate_2 = call.data[-1]
    await call.message.answer('–û—Ü–µ–Ω–∏—Ç–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞', reply_markup=builder_rate.as_markup())
    await state.update_data(rate_2=rate_2)

    await state.set_state(Answer.waiting_for_rate_3)
    await call.answer()


@user_router.callback_query(Answer.waiting_for_rate_3, F.data.startswith('rate_'))
async def rate_buttons(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    query_id = data.get('query_id')
    rate_1 = data.get('rate_1')
    rate_2 = data.get('rate_2')
    rate_3 = call.data[-1]

    await state.update_data(rate_=rate_3)

    await db.add_rate_to_query(f'–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å: {rate_1}, –ü–æ–ª–Ω–æ—Ç–∞: {rate_2}, –£–¥–æ–±—Å—Ç–≤–æ: {rate_3}', query_id)
    await call.message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!', reply_markup=builder_user.as_markup())

    await state.clear()
    await call.answer()


@user_router.message(Answer.waiting_for_support)
async def support_handler(msg: Message, state: FSMContext):
    data = await state.get_data()
    query_id = data.get('query_id')

    query = await db.get_query_by_id(query_id)
    if query[5] == '–†–µ—à–∞–µ—Ç—Å—è':
        admin_id = query[6]
        await bot.send_message(admin_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg.text}')
        # await bot.copy_message()
